//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AudisoftClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Student", Namespace="http://schemas.datacontract.org/2004/07/AudiSoftWCF")]
    [System.SerializableAttribute()]
    public partial class Student : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Teacher", Namespace="http://schemas.datacontract.org/2004/07/AudiSoftWCF")]
    [System.SerializableAttribute()]
    public partial class Teacher : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Note", Namespace="http://schemas.datacontract.org/2004/07/AudiSoftWCF")]
    [System.SerializableAttribute()]
    public partial class Note : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateStudent", ReplyAction="http://tempuri.org/IService1/CreateStudentResponse")]
        AudisoftClient.ServiceReference1.Student CreateStudent(AudisoftClient.ServiceReference1.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateStudent", ReplyAction="http://tempuri.org/IService1/CreateStudentResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Student> CreateStudentAsync(AudisoftClient.ServiceReference1.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateStudent", ReplyAction="http://tempuri.org/IService1/UpdateStudentResponse")]
        AudisoftClient.ServiceReference1.Student UpdateStudent(AudisoftClient.ServiceReference1.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateStudent", ReplyAction="http://tempuri.org/IService1/UpdateStudentResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Student> UpdateStudentAsync(AudisoftClient.ServiceReference1.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStudent", ReplyAction="http://tempuri.org/IService1/DeleteStudentResponse")]
        void DeleteStudent(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStudent", ReplyAction="http://tempuri.org/IService1/DeleteStudentResponse")]
        System.Threading.Tasks.Task DeleteStudentAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectStudent", ReplyAction="http://tempuri.org/IService1/SelectStudentResponse")]
        AudisoftClient.ServiceReference1.Student SelectStudent(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectStudent", ReplyAction="http://tempuri.org/IService1/SelectStudentResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Student> SelectStudentAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllStudents", ReplyAction="http://tempuri.org/IService1/GetAllStudentsResponse")]
        AudisoftClient.ServiceReference1.Student[] GetAllStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllStudents", ReplyAction="http://tempuri.org/IService1/GetAllStudentsResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Student[]> GetAllStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateTeacher", ReplyAction="http://tempuri.org/IService1/CreateTeacherResponse")]
        AudisoftClient.ServiceReference1.Teacher CreateTeacher(AudisoftClient.ServiceReference1.Teacher teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateTeacher", ReplyAction="http://tempuri.org/IService1/CreateTeacherResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Teacher> CreateTeacherAsync(AudisoftClient.ServiceReference1.Teacher teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTeacher", ReplyAction="http://tempuri.org/IService1/UpdateTeacherResponse")]
        AudisoftClient.ServiceReference1.Teacher UpdateTeacher(AudisoftClient.ServiceReference1.Teacher teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTeacher", ReplyAction="http://tempuri.org/IService1/UpdateTeacherResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Teacher> UpdateTeacherAsync(AudisoftClient.ServiceReference1.Teacher teacher);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTeacher", ReplyAction="http://tempuri.org/IService1/DeleteTeacherResponse")]
        void DeleteTeacher(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTeacher", ReplyAction="http://tempuri.org/IService1/DeleteTeacherResponse")]
        System.Threading.Tasks.Task DeleteTeacherAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectTeacher", ReplyAction="http://tempuri.org/IService1/SelectTeacherResponse")]
        AudisoftClient.ServiceReference1.Teacher SelectTeacher(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectTeacher", ReplyAction="http://tempuri.org/IService1/SelectTeacherResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Teacher> SelectTeacherAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTeachers", ReplyAction="http://tempuri.org/IService1/GetAllTeachersResponse")]
        AudisoftClient.ServiceReference1.Teacher[] GetAllTeachers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTeachers", ReplyAction="http://tempuri.org/IService1/GetAllTeachersResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Teacher[]> GetAllTeachersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateNote", ReplyAction="http://tempuri.org/IService1/CreateNoteResponse")]
        AudisoftClient.ServiceReference1.Note CreateNote(AudisoftClient.ServiceReference1.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateNote", ReplyAction="http://tempuri.org/IService1/CreateNoteResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Note> CreateNoteAsync(AudisoftClient.ServiceReference1.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateNote", ReplyAction="http://tempuri.org/IService1/UpdateNoteResponse")]
        AudisoftClient.ServiceReference1.Note UpdateNote(AudisoftClient.ServiceReference1.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateNote", ReplyAction="http://tempuri.org/IService1/UpdateNoteResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Note> UpdateNoteAsync(AudisoftClient.ServiceReference1.Note note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteNote", ReplyAction="http://tempuri.org/IService1/DeleteNoteResponse")]
        void DeleteNote(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteNote", ReplyAction="http://tempuri.org/IService1/DeleteNoteResponse")]
        System.Threading.Tasks.Task DeleteNoteAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectNote", ReplyAction="http://tempuri.org/IService1/SelectNoteResponse")]
        AudisoftClient.ServiceReference1.Note SelectNote(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectNote", ReplyAction="http://tempuri.org/IService1/SelectNoteResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Note> SelectNoteAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllNotes", ReplyAction="http://tempuri.org/IService1/GetAllNotesResponse")]
        AudisoftClient.ServiceReference1.Note[] GetAllNotes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllNotes", ReplyAction="http://tempuri.org/IService1/GetAllNotesResponse")]
        System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Note[]> GetAllNotesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : AudisoftClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<AudisoftClient.ServiceReference1.IService1>, AudisoftClient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AudisoftClient.ServiceReference1.Student CreateStudent(AudisoftClient.ServiceReference1.Student student) {
            return base.Channel.CreateStudent(student);
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Student> CreateStudentAsync(AudisoftClient.ServiceReference1.Student student) {
            return base.Channel.CreateStudentAsync(student);
        }
        
        public AudisoftClient.ServiceReference1.Student UpdateStudent(AudisoftClient.ServiceReference1.Student student) {
            return base.Channel.UpdateStudent(student);
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Student> UpdateStudentAsync(AudisoftClient.ServiceReference1.Student student) {
            return base.Channel.UpdateStudentAsync(student);
        }
        
        public void DeleteStudent(int Id) {
            base.Channel.DeleteStudent(Id);
        }
        
        public System.Threading.Tasks.Task DeleteStudentAsync(int Id) {
            return base.Channel.DeleteStudentAsync(Id);
        }
        
        public AudisoftClient.ServiceReference1.Student SelectStudent(int Id) {
            return base.Channel.SelectStudent(Id);
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Student> SelectStudentAsync(int Id) {
            return base.Channel.SelectStudentAsync(Id);
        }
        
        public AudisoftClient.ServiceReference1.Student[] GetAllStudents() {
            return base.Channel.GetAllStudents();
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Student[]> GetAllStudentsAsync() {
            return base.Channel.GetAllStudentsAsync();
        }
        
        public AudisoftClient.ServiceReference1.Teacher CreateTeacher(AudisoftClient.ServiceReference1.Teacher teacher) {
            return base.Channel.CreateTeacher(teacher);
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Teacher> CreateTeacherAsync(AudisoftClient.ServiceReference1.Teacher teacher) {
            return base.Channel.CreateTeacherAsync(teacher);
        }
        
        public AudisoftClient.ServiceReference1.Teacher UpdateTeacher(AudisoftClient.ServiceReference1.Teacher teacher) {
            return base.Channel.UpdateTeacher(teacher);
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Teacher> UpdateTeacherAsync(AudisoftClient.ServiceReference1.Teacher teacher) {
            return base.Channel.UpdateTeacherAsync(teacher);
        }
        
        public void DeleteTeacher(int Id) {
            base.Channel.DeleteTeacher(Id);
        }
        
        public System.Threading.Tasks.Task DeleteTeacherAsync(int Id) {
            return base.Channel.DeleteTeacherAsync(Id);
        }
        
        public AudisoftClient.ServiceReference1.Teacher SelectTeacher(int Id) {
            return base.Channel.SelectTeacher(Id);
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Teacher> SelectTeacherAsync(int Id) {
            return base.Channel.SelectTeacherAsync(Id);
        }
        
        public AudisoftClient.ServiceReference1.Teacher[] GetAllTeachers() {
            return base.Channel.GetAllTeachers();
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Teacher[]> GetAllTeachersAsync() {
            return base.Channel.GetAllTeachersAsync();
        }
        
        public AudisoftClient.ServiceReference1.Note CreateNote(AudisoftClient.ServiceReference1.Note note) {
            return base.Channel.CreateNote(note);
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Note> CreateNoteAsync(AudisoftClient.ServiceReference1.Note note) {
            return base.Channel.CreateNoteAsync(note);
        }
        
        public AudisoftClient.ServiceReference1.Note UpdateNote(AudisoftClient.ServiceReference1.Note note) {
            return base.Channel.UpdateNote(note);
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Note> UpdateNoteAsync(AudisoftClient.ServiceReference1.Note note) {
            return base.Channel.UpdateNoteAsync(note);
        }
        
        public void DeleteNote(int Id) {
            base.Channel.DeleteNote(Id);
        }
        
        public System.Threading.Tasks.Task DeleteNoteAsync(int Id) {
            return base.Channel.DeleteNoteAsync(Id);
        }
        
        public AudisoftClient.ServiceReference1.Note SelectNote(int Id) {
            return base.Channel.SelectNote(Id);
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Note> SelectNoteAsync(int Id) {
            return base.Channel.SelectNoteAsync(Id);
        }
        
        public AudisoftClient.ServiceReference1.Note[] GetAllNotes() {
            return base.Channel.GetAllNotes();
        }
        
        public System.Threading.Tasks.Task<AudisoftClient.ServiceReference1.Note[]> GetAllNotesAsync() {
            return base.Channel.GetAllNotesAsync();
        }
    }
}
